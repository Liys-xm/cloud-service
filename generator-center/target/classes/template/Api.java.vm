package ${package}.${moduleName}.controller;
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import com.baomidou.mybatisplus.core.metadata.IPage;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.web.bind.annotation.*;

import java.util.Arrays;
import java.util.List;

import ${mainPath}.${moduleName}.MPUtil;
import ${mainPath}.${moduleName}.R;
import ${mainPath}.${moduleName}.entity.${className}Model;
import ${mainPath}.${moduleName}.service.${className}Service;

/**
 * ${comments}
 *api接口
 * @author ${author}
 * @email ${email}
 * @date ${datetime}
 */
@RestController
@RequestMapping("${pathName}")
@Api(tags = "${comments}Controller")
public class ${className}Controller {
    @Autowired
    private ${className}Service ${classname}Service;

    /**
     * 获取${comments}分页信息
     *
     * @param ${classname}Model
     * @param pageNumber
     * @param pageSize
     * @return
     */
    @PostMapping(value = "/queryPageList", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiOperation(value = "获取${comments}分页信息", notes = "输入参数为对象", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "操作成功"),
            @ApiResponse(code = 403, message = "没有权限"),
            @ApiResponse(code = 500, message = "服务器内部异常")})
    public R queryPageList(@RequestBody ${className}Model ${classname}Model, @RequestParam("pageNumber") Integer pageNumber, @RequestParam("pageSize") Integer pageSize) {
        QueryWrapper<${className}Model> qw = new QueryWrapper<>();
        qw.allEq(MPUtil.allEQMapPre(${classname}Model, "${tableName}"));
        IPage page = ${classname}Service.page(new Page<>(pageNumber, pageSize), qw);
        return R.ok("获取${comments}分页成功！").put("data", page);
    }

    /**
     * 获取${comments}信息
     *
     * @param ${classname}Model
     * @return
     */
    @PostMapping(value = "/queryList", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiOperation(value = "获取${comments}信息", notes = "输入参数为对象", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "操作成功"),
            @ApiResponse(code = 403, message = "没有权限"),
            @ApiResponse(code = 500, message = "服务器内部异常")})
    public R queryList(@RequestBody ${className}Model ${classname}Model) {
        QueryWrapper<${className}Model> qw = new QueryWrapper<>();
        qw.allEq(MPUtil.allEQMapPre(${classname}Model, "${tableName}"));
        List<${className}Model> ${classname}List = ${classname}Service.list(qw);
        return R.ok("获取${comments}信息成功！").put("data", ${classname}List);
    }

    /**
     * 根据条件查询单个${comments}
     *
     * @param ${classname}Model
     * @return
     */
    @PostMapping(value = "/query", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiOperation(value = "根据添加查询单个部门", notes = "输入参数为对象", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "操作成功"),
            @ApiResponse(code = 403, message = "没有权限"),
            @ApiResponse(code = 500, message = "服务器内部异常")})
    public R query(@RequestBody ${className}Model ${classname}Model) {
        QueryWrapper<${className}Model> qw = new QueryWrapper<>();
        qw.allEq(MPUtil.allEQMapPre(${classname}Model, "${tableName}"));
            ${className}Model ${classname} = ${classname}Service.getOne(qw);
        return R.ok("获取${comments}信息成功！").put("data", ${classname});
    }

    /**
     * 根据主键查询单个${comments}
     *
     * @param ${pk.attrname}
     * @return
     */
    @GetMapping("/get/{id}")
    @ApiOperation(value = "根据ID查询单个${comments}", notes = "输入参数为ID", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "操作成功"),
            @ApiResponse(code = 403, message = "没有权限"),
            @ApiResponse(code = 500, message = "服务器内部异常")})
    public R get(@PathVariable("${pk.attrname}") ${pk.attrType} ${pk.attrname}) {
            ${className}Model ${classname}Model = ${classname}Service.getById(${pk.attrname});
        return R.ok("获取${classname}信息成功！").put("data", ${classname}Model);
    }

    /**
     * 新增${comments}数据
     *
     * @param ${classname}Model
     * @return
     */
    @PostMapping("/save/json")
    @ApiOperation(value = "新增${comments}数据", notes = "输入参数为JSON", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "操作成功"),
            @ApiResponse(code = 403, message = "没有权限"),
            @ApiResponse(code = 500, message = "服务器内部异常")})
    public R saveJson(@RequestBody ${className}Model ${classname}Model) {
            ${classname}Service.save(${classname}Model);
        return R.ok("新增${comments}成功！");
    }

    /**
     * 修改${comments}数据
     *
     * @param ${classname}Model
     * @return
     */
    @PostMapping("/update/json")
    @ApiOperation(value = "修改${comments}数据", notes = "输入参数为JSON", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "操作成功"),
            @ApiResponse(code = 403, message = "没有权限"),
            @ApiResponse(code = 500, message = "服务器内部异常")})
    public R updateJson(@RequestBody ${className}Model ${classname}Model) {
            ${classname}Service.updateById(${classname}Model);//全部更新
        return R.ok("修改${comments}成功！");
    }

    /**
     * 删除${comments}数据
     */
    @PostMapping("/delete")
    @ApiOperation(value = "删除${comments}数据", notes = "输入参数为ID数组", produces = MediaType.APPLICATION_JSON_UTF8_VALUE)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "操作成功"),
            @ApiResponse(code = 403, message = "没有权限"),
            @ApiResponse(code = 500, message = "服务器内部异常")})
    public R delete(@RequestBody ${pk.attrType}[] ${pk.attrname}s) {
            ${classname}Service.removeByIds(Arrays.asList(${pk.attrname}s));
        return R.ok("删除${comments}成功！");
    }

}
